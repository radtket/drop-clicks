{"version":3,"sources":["components/Overlay.js","utils/constants.js","utils/logic-board.js","utils/logic-levels.js","utils/local-storage.js","components/Subtitle.js","components/HighScoreRow.js","utils/helpers.js","components/Buttons.js","components/HighScores.js","components/InitialOverlay.js","components/Paused.js","components/LevelOver.js","components/HighScoreFragment.js","components/GameOver.js","components/Overlays.js","components/Square.js","components/BottomNav.js","components/LastScore.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Overlay","_ref","children","noAnimation","highScore","_jsx","className","classNames","style","animation","GAME_SIZE","window","innerWidth","ENCOURAGEMENT","GAME_TYPE_ORIGINAL","GAME_TYPE_PUZZLE","LEVELS_ENUM","dim","colors","time","movesLeft","createBoard","BOARD","Array","keys","map","id","Math","random","val","floor","randomizeBoard","board","coords","reduce","all","one","i","concat","square","j","array","length","shuffleArray","newBoard","x","y","pop","getAdjacentSquares","pileIdx","pileNum","filter","idx","num","_ref2","parseIdx","getSquareCollection","row","col","pile","max","len","color","squareIdx","collection","checkedSquares","squaresToCheck","shift","push","newSquaresToCheck","cum","current","indexOf","isLevelOver","isGameOrigional","gameType","getLevels","getLevelInfo","level","LEVELS","rotation","startTime","Date","getTime","isLevelComplete","getNextLevelState","state","gameOver","levelOver","score","pieceBonus","timeBonus","levelBonus","hasBeenPaused","elapsedTime","lastScore","newGameState","bestGroup","clicks","rotating","getTimeBonus","levelTime","percentLeft","getHighScores","scores","localStorage","getItem","parsedScores","JSON","parse","puzzle","original","saveState","copy","setItem","stringify","Subtitle","place","globalPlace","globalPlays","exclamation","_jsxs","date","DateTime","local","toLocaleString","DATE_SHORT","minus","days","HighScoreRow","highscorePlace","initials","isNewScore","fromISO","Icon","ButtonPlayGameType","restartGame","hasIcon","onClick","type","string","charAt","toUpperCase","slice","ButtonHighScore","_ref3","setState","showHighScore","getPlace","currentScore","currentInitials","placeIndex","findIndex","HighScores","showGlobal","globalScores","localScores","loading","useState","getInitialState","useEffect","axios","get","then","_ref4","data","prev","currentScores","_Fragment","Boolean","key","InitialOverlay","Paused","resumeGame","LevelOver","goToNextLevel","COMPLETED","textAlign","HighScoreFragment","handleChange","handleSubmit","resetGame","isHighScore","maxLength","onChange","placeholder","size","value","GameOver","highscores","checkHighScore","sort","scoreA","scoreB","HIGH_SCORES_KEPT","submitted","highscoresLocal","highscoresGlobal","getInitalState","createScoreObj","toISO","_ref5","target","async","res","post","newHighScores","scoreObj","highScores","createNewHighScores","updateLocalHighScores","top10","total","Overlays","initialized","paused","Initial","defaultProps","Square","squareHeight","handleClick","POSTION","top","left","onTransitionEnd","e","stopPropagation","transform","border","height","width","BottomNav","active","handleRotate","handleRandom","Score","LastScore","red","Timer","setGameOver","setWidth","getPercentLeft","currentTime","endTime","margin","onAnimationEnd","animationDuration","animationDelay","App","Component","constructor","props","super","handleVisibilityChange","this","document","hidden","newState","CURRENT_TIME","LEVEL_TIME","ELAPSED_TIME","min","getElapsedTime","oldBoard","oldClicks","removeSquaresAndCondense","squaresToRemove","forEach","handleLevelOver","falling","dir","canUseMove","rotationDirection","levelOverState","handleKeyDown","preventDefault","piecesLeft","getPieceBonus","UNSAFE_componentWillMount","addEventListener","componentWillUnmount","removeEventListener","render","effectiveRotation","inactive","isSideways","position","newGameType","removeItem","sideways","upright","newCol","newRow","undefined","rotateBoard","rotateBoardCounter","ceil","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.3f7d7e6e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Overlay = ({ children, noAnimation, highScore }) => {\n  return (\n    <div\n      className={classNames('overlay', {\n        'overlay-high-score': highScore,\n      })}\n      style={noAnimation ? { animation: 'none' } : {}}\n    >\n      {children}\n    </div>\n  );\n};\n\nOverlay.propTypes = {\n  noAnimation: PropTypes.bool,\n  highScore: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Overlay;\n","export const GAME_SIZE = window.innerWidth > 599 ? 500 : 300;\n\nexport const GAME_STYLE = {\n  height: `${GAME_SIZE}px`,\n  width: `${GAME_SIZE}px`,\n};\n\nexport const ENCOURAGEMENT = [\n  'You Rock!',\n  'Keep it up!',\n  'Wowee!',\n  'Congratulations!',\n  \"I'm impressed!\",\n  'Fantastic!',\n  'Absolutely stellar!',\n  'Way to go!',\n];\n\nexport const HIGH_SCORES_KEPT = 10;\n\nexport const GAME_TYPE_ORIGINAL = 'original';\n\nexport const GAME_TYPE_PUZZLE = 'puzzle';\n\nexport const LEVELS_ENUM = {\n  [GAME_TYPE_ORIGINAL]: [\n    // Math done in my head...could...be wrong.\n    { dim: 4, colors: 2, time: 20, movesLeft: 3 }, // 8\n    { dim: 5, colors: 2, time: 20, movesLeft: 3 }, // 12.5\n    { dim: 6, colors: 2, time: 20, movesLeft: 3 }, // 18\n    { dim: 6, colors: 3, time: 30, movesLeft: 3 }, // Average 12 per color\n    { dim: 7, colors: 3, time: 30, movesLeft: 3 }, // 16.33\n    { dim: 8, colors: 3, time: 30, movesLeft: 3 }, // 21.33\n    { dim: 9, colors: 3, time: 30, movesLeft: 3 }, // 27\n    { dim: 8, colors: 4, time: 40, movesLeft: 3 }, // 16\n    { dim: 9, colors: 4, time: 40, movesLeft: 3 }, // 20.25\n    { dim: 10, colors: 4, time: 40, movesLeft: 3 }, // 25\n    { dim: 11, colors: 4, time: 30, movesLeft: 3 }, // 30.25\n    { dim: 12, colors: 4, time: 30, movesLeft: 3 }, // 36\n    // { dim: 13, colors: 4, time: 10, movesLeft: 3 }, // 42.25\n    // { dim: 14, colors: 4, time: 30, movesLeft: 3 } // 48\n  ],\n  [GAME_TYPE_PUZZLE]: [\n    { dim: 4, colors: 2, time: 20, movesLeft: 3 }, // 8\n    { dim: 5, colors: 2, time: 20, movesLeft: 3 }, // 12.5\n    { dim: 6, colors: 2, time: 20, movesLeft: 3 }, // 18\n    { dim: 6, colors: 3, time: 30, movesLeft: 3 }, // Average 12 per color\n    { dim: 7, colors: 3, time: 30, movesLeft: 3 }, // 16.33\n    { dim: 8, colors: 3, time: 30, movesLeft: 3 }, // 21.33\n    { dim: 9, colors: 3, time: 30, movesLeft: 3 }, // 27\n    { dim: 8, colors: 4, time: 40, movesLeft: 3 }, // 16\n    { dim: 9, colors: 4, time: 40, movesLeft: 3 }, // 20.25\n    { dim: 10, colors: 4, time: 40, movesLeft: 3 }, // 25\n    { dim: 11, colors: 4, time: 30, movesLeft: 3 }, // 30.25\n    { dim: 12, colors: 4, time: 30, movesLeft: 3 }, // 36\n    { dim: 12, colors: 5, time: 30, movesLeft: 3 }, // ~29\n    { dim: 11, colors: 5, time: 30, movesLeft: 3 }, // ~29\n    { dim: 10, colors: 5, time: 30, movesLeft: 3 }, // ~29\n    { dim: 10, colors: 5, time: 30, movesLeft: 2 }, // ~29\n    { dim: 10, colors: 5, time: 30, movesLeft: 1 }, // ~29\n    { dim: 10, colors: 5, time: 30, movesLeft: 0 }, // ~29\n  ],\n};\n","const createEmptyBoard = cells => {\n  return [...Array(cells).keys()];\n};\n\nexport const createBoard = (dim, colors) => {\n  const BOARD = createEmptyBoard(dim);\n  return BOARD.map(() => {\n    return BOARD.map(() => {\n      return {\n        id: Math.random(),\n        val: Math.floor(Math.random() * colors),\n      };\n    });\n  });\n};\n\nexport const rotateBoard = board => {\n  const newBoard = [];\n  for (let i = board.length - 1; i >= 0; i--) {\n    for (let j = 0; j < board[i].length; j++) {\n      const newCol = j;\n      const newRow = board.length - i - 1;\n\n      if (!newBoard[newCol]) {\n        newBoard[newCol] = [];\n      }\n\n      newBoard[newCol][newRow] = board[i][j];\n    }\n  }\n\n  return newBoard.map(pile => {\n    return pile.filter(square => {\n      return square !== undefined;\n    });\n  });\n};\n\nexport const rotateBoardCounter = board => {\n  const newBoard = [];\n  const dim = board\n    .map(pile => {\n      return pile.length;\n    })\n    .reduce((max, len) => {\n      return Math.max(max, len);\n    }, 0);\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const newCol = dim - 1 - j;\n      if (!newBoard[newCol]) {\n        newBoard[newCol] = [];\n      }\n      newBoard[dim - 1 - j][i] = board[i][j];\n    }\n  }\n\n  return newBoard.map(pile => {\n    return pile.filter(square => {\n      return square !== undefined;\n    });\n  });\n};\n\n// HT: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nexport const randomizeBoard = board => {\n  const coords = board.reduce((all, one, i) => {\n    return all.concat(\n      one.map((square, j) => {\n        return [i, j];\n      })\n    );\n  }, []);\n\n  shuffleArray(coords);\n  const newBoard = [];\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (!newBoard[i]) {\n        newBoard[i] = [];\n      }\n      const [x, y] = coords.pop();\n      newBoard[i][j] = board[x][y];\n    }\n  }\n\n  return newBoard;\n};\n\nconst getAdjacentSquares = (dim, board, pileIdx, pileNum) => {\n  return [\n    [pileIdx, pileNum + 1],\n    [pileIdx, pileNum - 1],\n    [pileIdx - 1, pileNum],\n    [pileIdx + 1, pileNum],\n  ]\n    .filter(([idx, num]) => {\n      return (\n        typeof board[idx] !== 'undefined' &&\n        typeof board[idx][num] !== 'undefined'\n      );\n    })\n    .map(([idx, num]) => {\n      return idx * dim + num;\n    });\n};\n\nconst parseIdx = (idx, dim) => {\n  return [Math.floor(idx / dim), idx % dim];\n};\n\nexport const getSquareCollection = (board, row, col) => {\n  const dim = board\n    .map(pile => {\n      return pile.length;\n    })\n    .reduce((max, len) => {\n      return Math.max(max, len);\n    }, 0);\n  const color = board[row][col].val;\n  const squareIdx = row * dim + col;\n\n  const collection = [squareIdx];\n  const checkedSquares = [squareIdx];\n\n  let squaresToCheck = getAdjacentSquares(dim, board, row, col);\n\n  while (squaresToCheck.length) {\n    const [idx, num] = parseIdx(squaresToCheck.shift(), dim);\n\n    if (board[idx][num].val === color) {\n      collection.push(idx * dim + num);\n      const newSquaresToCheck = getAdjacentSquares(dim, board, idx, num);\n\n      squaresToCheck = squaresToCheck\n        .concat(newSquaresToCheck)\n        // Avoid copies\n        .reduce((cum, current) => {\n          if (cum.indexOf(current) === -1) {\n            cum.push(current);\n          }\n          return cum;\n        }, [])\n        // filter out already checked\n        .filter(idx => {\n          return checkedSquares.indexOf(idx) === -1;\n        });\n    }\n    checkedSquares.push(idx * dim + num);\n  }\n\n  return collection.map(idx => {\n    return parseIdx(idx, dim);\n  });\n};\n\nexport const removeSquaresAndCondense = (board, squaresToRemove) => {\n  squaresToRemove.forEach(([idx, num]) => {\n    board[idx][num] = false;\n  });\n\n  return board\n    .map(pile => {\n      return pile.filter(square => {\n        return square !== false;\n      });\n    })\n    .filter(pile => {\n      return pile.length;\n    });\n};\n\nexport const isLevelOver = (board, movesLeft) => {\n  const colors = [];\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (movesLeft > 0) {\n        // Let's just check for multiple of the same colors\n        if (colors.indexOf(board[i][j].val) === -1) {\n          colors.push(board[i][j].val);\n        } else {\n          return false;\n        }\n      } else {\n        // If no \"movesLeft\", we need to see if there are any adjacent squares\n        const collection = getSquareCollection(board, i, j);\n        if (collection.length > 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n};\n\nexport const getPieceBonus = board => {\n  const piecesLeft = board.reduce((cum, col) => {\n    return cum + col.length;\n  }, 0);\n\n  if (piecesLeft === 0) {\n    return 10000;\n  }\n  return Math.max(5000 - piecesLeft * 100, 0);\n};\n","import { GAME_TYPE_ORIGINAL, LEVELS_ENUM } from './constants';\nimport { createBoard } from './logic-board';\n\nexport const isGameOrigional = gameType => {\n  return gameType === GAME_TYPE_ORIGINAL;\n};\n\nexport const getLevels = gameType => {\n  return LEVELS_ENUM[gameType];\n};\n\nexport const getLevelInfo = (level, gameType) => {\n  const LEVELS = getLevels(gameType);\n  const { dim, colors, time, movesLeft } = LEVELS[level];\n  return {\n    level,\n    dim,\n    colors,\n    movesLeft,\n    time,\n    rotation: 0,\n    board: createBoard(dim, colors),\n    startTime: new Date().getTime(),\n  };\n};\n\nexport const isLevelComplete = ({ level, gameType }) => {\n  return level === getLevels(gameType).length;\n};\n\nexport const getNextLevelState = state => {\n  const level = state.level + 1;\n\n  if (isLevelComplete({ level, gameType: state.gameType })) {\n    const score =\n      state.score + state.pieceBonus + state.timeBonus + state.levelBonus;\n\n    return { gameOver: true, levelOver: false, score, level };\n  }\n\n  const levelInfo = getLevelInfo(level, state.gameType);\n  return {\n    ...levelInfo,\n    hasBeenPaused: false,\n    elapsedTime: 0,\n    levelOver: false,\n    lastScore: state.pieceBonus + state.timeBonus + state.levelBonus,\n    score: state.score + state.pieceBonus + state.timeBonus + state.levelBonus,\n  };\n};\n\nexport const newGameState = gameType => {\n  const level = 0;\n  const levelInfo = getLevelInfo(level, gameType);\n\n  return {\n    ...levelInfo,\n    bestGroup: 0,\n    clicks: 0,\n    gameOver: false,\n    hasBeenPaused: false,\n    lastScore: 0,\n    level,\n    levelOver: false,\n    rotating: false,\n    score: 0,\n  };\n};\n\nexport const getTimeBonus = (level, startTime, gameType) => {\n  const LEVELS = getLevels(gameType);\n  const levelTime = LEVELS[level].time * 1000;\n  const currentTime = new Date().getTime();\n  const endTime = startTime + levelTime;\n  const percentLeft = (endTime - currentTime) / levelTime;\n\n  return Math.max(Math.floor(percentLeft * 1000) * 10, 5);\n};\n","import { GAME_TYPE_ORIGINAL } from './constants';\nimport { newGameState } from './logic-levels';\n\nexport const getInitalBoardState = () => {\n  return (\n    JSON.parse(localStorage.getItem('board-state')) || {\n      initialized: false,\n      gameType: GAME_TYPE_ORIGINAL,\n      ...newGameState(GAME_TYPE_ORIGINAL),\n      // So timer isn't active\n      gameOver: true,\n      paused: false,\n    }\n  );\n};\n\nexport const getHighScores = () => {\n  const scores = localStorage.getItem('scores');\n\n  if (scores) {\n    const parsedScores = JSON.parse(scores);\n    // Previous versions will not have a puzzle array\n    if (!parsedScores.puzzle) {\n      parsedScores.puzzle = [];\n    }\n    return parsedScores;\n  }\n\n  return {\n    original: [],\n    puzzle: [],\n  };\n};\n\nexport const saveState = state => {\n  const copy = { ...state };\n\n  // Don't need the animation to replay...\n  copy.lastScore = 0;\n\n  if (copy.levelOver) {\n    // Lets grab the next level\n  }\n\n  localStorage.setItem('board-state', JSON.stringify(copy));\n};\n","import React from 'react';\nimport { ENCOURAGEMENT } from '../utils/constants';\n\nconst Subtitle = ({ place, globalPlace, globalPlays }) => {\n  const exclamation =\n    ENCOURAGEMENT[Math.floor(Math.random() * ENCOURAGEMENT.length)];\n\n  if (globalPlace && globalPlays) {\n    return (\n      <div className=\"overlay-text\">\n        #{globalPlace} of {globalPlays} All-Time.{' '}\n        {globalPlace / globalPlays < 0.5 && exclamation}\n      </div>\n    );\n  }\n  if (place > 0) {\n    // Show local\n    return (\n      <div className=\"overlay-text\">\n        #{place} All-Time. {exclamation}\n      </div>\n    );\n  }\n  return false;\n};\n\nexport default Subtitle;\n","import React from 'react';\nimport { DateTime } from 'luxon';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Date = ({ date }) => {\n  switch (date) {\n    case '12/25/2018':\n      return (\n        <span>\n          <span style={{ color: 'red' }}>XMAS</span>\n          <span style={{ color: '#00c900' }}>18❤️</span>\n        </span>\n      );\n    case DateTime.local().toLocaleString(DateTime.DATE_SHORT):\n      return 'Today';\n    case DateTime.local()\n      .minus({ days: 1 })\n      .toLocaleString(DateTime.DATE_SHORT):\n      return 'Yesterday';\n    default:\n      return date;\n  }\n};\n\nconst HighScoreRow = ({\n  date,\n  highscorePlace,\n  initials,\n  isNewScore,\n  score,\n}) => {\n  return (\n    <li\n      className={classNames('highscore-li', {\n        'new-score': isNewScore,\n      })}\n    >\n      <span className=\"highscore-initials\">\n        <span className=\"highscore-place\">{highscorePlace}.</span> {initials}\n      </span>\n      <span className=\"highscore-score\">{score}</span>\n      <span className=\"highscore-date\">\n        <Date\n          date={DateTime.fromISO(date).toLocaleString(DateTime.DATE_SHORT)}\n        />\n      </span>\n    </li>\n  );\n};\n\nHighScoreRow.propTypes = {\n  initials: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default HighScoreRow;\n","import { HIGH_SCORES_KEPT } from './constants';\nimport { getLevels } from './logic-levels';\n\nexport const getElapsedTime = ({ level, startTime, gameType }) => {\n  const LEVELS = getLevels(gameType);\n  const CURRENT_TIME = new Date().getTime();\n\n  const LEVEL_TIME = LEVELS[level].time * 1000;\n  const ELAPSED_TIME = CURRENT_TIME - startTime;\n\n  return Math.min(ELAPSED_TIME, LEVEL_TIME * 1000);\n};\n\nexport const checkHighScore = (score, highscores) => {\n  if (highscores.length < HIGH_SCORES_KEPT) {\n    return true;\n  }\n\n  // should be unnecessary\n  highscores.sort((scoreA, scoreB) => {\n    return scoreB.score - scoreA.score;\n  });\n\n  return highscores[HIGH_SCORES_KEPT - 1].score < score;\n};\n\nexport const createNewHighScores = (scoreObj, highScores) => {\n  highScores.push(scoreObj);\n  highScores.sort((scoreA, scoreB) => {\n    return scoreB.score - scoreA.score;\n  });\n\n  return highScores.slice(0, HIGH_SCORES_KEPT);\n};\n\nexport const capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { capitalizeFirstLetter } from '../utils/helpers';\nimport { GAME_TYPE_ORIGINAL, GAME_TYPE_PUZZLE } from '../utils/constants';\n\nconst Icon = ({ gameType }) => {\n  return (\n    <i\n      className={classNames('fa', {\n        'fa-clock': gameType === GAME_TYPE_ORIGINAL,\n        'fa-puzzle-piece': gameType === GAME_TYPE_PUZZLE,\n      })}\n    />\n  );\n};\n\nexport const ButtonPlayGameType = ({ restartGame, hasIcon, gameType }) => {\n  return (\n    <button\n      className={classNames('btn', { 'overlay-btn': hasIcon })}\n      onClick={restartGame(gameType)}\n      type=\"button\"\n    >\n      Play {capitalizeFirstLetter(gameType)}\n      {hasIcon && <Icon {...{ gameType }} />}\n    </button>\n  );\n};\n\nexport const ButtonHighScore = ({ setState, gameType }) => {\n  return (\n    <button\n      className=\"btn overlay-btn\"\n      onClick={() => {\n        setState({\n          showHighScore: true,\n          gameType,\n        });\n      }}\n      type=\"button\"\n    >\n      High Scores\n      <Icon {...{ gameType }} />\n    </button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { getHighScores } from '../utils/local-storage';\nimport Subtitle from './Subtitle';\nimport HighScoreRow from './HighScoreRow';\nimport { ButtonPlayGameType } from './Buttons';\nimport { GAME_TYPE_ORIGINAL, GAME_TYPE_PUZZLE } from '../utils/constants';\n\nconst getPlace = ({ scores, currentScore, currentInitials }) => {\n  const placeIndex = scores.findIndex(score => {\n    return score.score === currentScore && score.initials === currentInitials;\n  });\n\n  if (placeIndex !== -1) {\n    return placeIndex + 1;\n  }\n  // No such thing as zero place, right?\n  return 0;\n};\n\nconst getInitialState = ({\n  gameType,\n  globalPlace,\n  currentScore,\n  currentInitials,\n}) => {\n  // get local scores\n  const localScores = getHighScores();\n\n  // Determine which to show first\n  let showGlobal = true;\n  if (currentScore && globalPlace > 10) {\n    // Show if it's a local high score, but not global\n    if (\n      getPlace({ scores: localScores[gameType], currentScore, currentInitials })\n    ) {\n      showGlobal = false;\n    }\n  }\n\n  return {\n    loading: true,\n    localScores,\n    showGlobal,\n  };\n};\n\nconst HighScores = ({\n  globalPlace,\n  globalPlays,\n  currentScore,\n  currentInitials,\n  restartGame,\n  gameType,\n}) => {\n  const [{ showGlobal, globalScores, localScores, loading }, setState] =\n    useState(\n      getInitialState({\n        gameType,\n        globalPlace,\n        currentScore,\n        currentInitials,\n      })\n    );\n\n  useEffect(() => {\n    return axios\n      .get('https://wcs0oio6th.execute-api.us-east-1.amazonaws.com/dev/score')\n      .then(({ data }) => {\n        setState(prev => {\n          return { ...prev, loading: false, globalScores: data.scores };\n        });\n      });\n  }, []);\n\n  if (loading) {\n    return 'Retrieving Scores...';\n  }\n\n  const currentScores = showGlobal\n    ? globalScores[gameType]\n    : localScores[gameType];\n\n  const place = getPlace({\n    scores: currentScores,\n    currentScore,\n    currentInitials,\n  });\n\n  return (\n    <>\n      <h2>\n        <button\n          className=\"highscore-toggle\"\n          onClick={() => {\n            setState(prev => {\n              return { ...prev, showGlobal: !prev.showGlobal };\n            });\n          }}\n          type=\"button\"\n        >\n          <span className=\"highscore-toggle-arrow\">⇣</span>\n          {showGlobal ? 'Global' : 'Your'}\n        </button>{' '}\n        High Scores\n      </h2>\n\n      {showGlobal && <Subtitle {...{ place, globalPlace, globalPlays }} />}\n\n      <div className=\"highscore-wrapper\">\n        <ol className=\"highscore-table\">\n          {currentScores.map((score, i) => {\n            return (\n              <HighScoreRow\n                {...{\n                  ...score,\n                  isNewScore: Boolean(place && i === place - 1),\n                  highscorePlace: i + 1,\n                  place,\n                  i,\n                  key: i,\n                }}\n              />\n            );\n          })}\n        </ol>\n        {!currentScores.length && (\n          <div>\n            <p>No scores found.</p>\n            <p>Try playing a game!</p>\n          </div>\n        )}\n      </div>\n\n      <div className=\"btn-wrapper\">\n        <ButtonPlayGameType\n          {...{ restartGame, gameType: GAME_TYPE_ORIGINAL }}\n        />\n        <ButtonPlayGameType {...{ restartGame, gameType: GAME_TYPE_PUZZLE }} />\n      </div>\n    </>\n  );\n};\n\nHighScores.propTypes = {\n  currentInitials: PropTypes.string,\n  currentScore: PropTypes.number,\n  gameType: PropTypes.string.isRequired,\n  globalPlace: PropTypes.number,\n  globalPlays: PropTypes.number,\n  restartGame: PropTypes.func.isRequired,\n  scores: PropTypes.array.isRequired,\n};\n\nexport default HighScores;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Overlay from './Overlay';\nimport HighScores from './HighScores';\nimport { getHighScores } from '../utils/local-storage';\nimport { ButtonHighScore, ButtonPlayGameType } from './Buttons';\nimport { GAME_TYPE_ORIGINAL, GAME_TYPE_PUZZLE } from '../utils/constants';\n\nconst InitialOverlay = ({ restartGame }) => {\n  const [{ gameType, showHighScore }, setState] = useState({\n    showHighScore: false,\n    gameType: GAME_TYPE_ORIGINAL,\n  });\n\n  return (\n    <Overlay highScore={showHighScore} noAnimation>\n      {!showHighScore ? (\n        <>\n          <ButtonPlayGameType\n            {...{ restartGame, gameType: GAME_TYPE_ORIGINAL, hasIcon: true }}\n          />\n          <ButtonPlayGameType\n            {...{ restartGame, gameType: GAME_TYPE_PUZZLE, hasIcon: true }}\n          />\n          <ButtonHighScore {...{ setState, gameType: GAME_TYPE_ORIGINAL }} />\n          <ButtonHighScore {...{ setState, gameType: GAME_TYPE_PUZZLE }} />\n        </>\n      ) : (\n        <HighScores\n          {...{\n            gameType,\n            restartGame,\n            scores: getHighScores().original,\n          }}\n        />\n      )}\n    </Overlay>\n  );\n};\n\nInitialOverlay.propTypes = {\n  restartGame: PropTypes.func.isRequired,\n};\n\nexport default InitialOverlay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from './Overlay';\nimport { ButtonPlayGameType } from './Buttons';\nimport { GAME_TYPE_ORIGINAL, GAME_TYPE_PUZZLE } from '../utils/constants';\n\nconst Paused = ({ rotation, resumeGame, restartGame }) => {\n  return (\n    <Overlay noAnimation rotation={rotation}>\n      <h2>Game Paused</h2>\n      <div className=\"paused-button-wrapper\">\n        <button className=\"btn\" onClick={resumeGame} type=\"button\">\n          Resume\n        </button>\n      </div>\n      <div className=\"paused-button-wrapper\">\n        <ButtonPlayGameType\n          {...{ restartGame, gameType: GAME_TYPE_ORIGINAL }}\n        />\n      </div>\n      <div className=\"paused-button-wrapper\">\n        <ButtonPlayGameType {...{ restartGame, gameType: GAME_TYPE_PUZZLE }} />\n      </div>\n    </Overlay>\n  );\n};\n\nPaused.propTypes = {\n  rotation: PropTypes.number.isRequired,\n  resumeGame: PropTypes.func.isRequired,\n  restartGame: PropTypes.func.isRequired,\n};\n\nexport default Paused;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Overlay from './Overlay';\nimport { isGameOrigional, isLevelComplete } from '../utils/logic-levels';\n\nconst LevelOver = ({\n  gameType,\n  levelBonus,\n  pieceBonus,\n  timeBonus,\n  level,\n  rotation,\n  goToNextLevel,\n}) => {\n  const COMPLETED = isLevelComplete({ level, gameType });\n\n  return (\n    <Overlay rotation={rotation}>\n      <h2>{COMPLETED ? 'Game Completed!' : `Level ${level} Completed`}</h2>\n      <div className=\"bonus-wrapper\">\n        <h3 className=\"fuck-dude time-bonus\">\n          {isGameOrigional(gameType) ? 'Time' : 'Level'} Bonus:{' '}\n          <span>{isGameOrigional(gameType) ? timeBonus : levelBonus}</span>\n        </h3>\n        <h3 className=\"fuck-dude piece-bonus\">\n          Piece Bonus: <span>{pieceBonus}</span>\n        </h3>\n        <h3 className=\"fuck-dude total-score\">\n          Total Bonus: <span>{timeBonus + pieceBonus + levelBonus}</span>\n        </h3>\n      </div>\n      <div className=\"fuck-dude next-level\" style={{ textAlign: 'center' }}>\n        <button className=\"btn\" onClick={goToNextLevel} type=\"button\">\n          {COMPLETED ? 'Finish' : 'Next Level'}\n        </button>\n      </div>\n    </Overlay>\n  );\n};\n\nLevelOver.propTypes = {\n  goToNextLevel: PropTypes.func.isRequired,\n  level: PropTypes.number.isRequired,\n  gameType: PropTypes.string.isRequired,\n  pieceBonus: PropTypes.number.isRequired,\n  levelBonus: PropTypes.number.isRequired,\n  rotation: PropTypes.number.isRequired,\n  timeBonus: PropTypes.number.isRequired,\n};\n\nexport default LevelOver;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst HighScoreFragment = ({\n  handleChange,\n  handleSubmit,\n  resetGame,\n  initials,\n  isHighScore,\n}) => {\n  return (\n    <>\n      <div\n        className=\"overlay-text\"\n        style={{\n          color: 'inherit',\n        }}\n      >\n        {isHighScore\n          ? \"You've got a high score! Please enter your initials.\"\n          : 'Submit your score to see you how you did globally!'}\n      </div>\n      <div className=\"highscore-input\">\n        <input\n          maxLength=\"3\"\n          onChange={handleChange}\n          placeholder=\"---\"\n          size=\"3\"\n          type=\"text\"\n          value={initials}\n        />\n      </div>\n      <div style={{ textAlign: 'center' }}>\n        <buttom className=\"btn\" onClick={handleSubmit} type=\"button\">\n          Submit\n        </buttom>\n        {!isHighScore && (\n          <buttom className=\"btn\" onClick={resetGame} type=\"button\">\n            Play Again\n          </buttom>\n        )}\n      </div>\n    </>\n  );\n};\n\nHighScoreFragment.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  initials: PropTypes.string.isRequired,\n  isHighScore: PropTypes.bool.isRequired,\n  resetGame: PropTypes.func.isRequired,\n};\n\nexport default HighScoreFragment;\n","import React, { Fragment, useState } from 'react';\nimport { DateTime } from 'luxon';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport Overlay from './Overlay';\nimport HighScores from './HighScores';\n\nimport { getHighScores } from '../utils/local-storage';\nimport HighScoreFragment from './HighScoreFragment';\nimport { checkHighScore, createNewHighScores } from '../utils/helpers';\n\nconst getInitalState = ({ score, gameType }) => {\n  const initials = localStorage.getItem('initials') || '';\n  const highscores = getHighScores();\n  const isHighScore = checkHighScore(score, highscores[gameType]);\n  return {\n    highscores,\n    isHighScore,\n    initials,\n    submitted: false,\n    highscoresLocal: null,\n    highscoresGlobal: null,\n    globalPlace: null,\n    globalPlays: null,\n  };\n};\n\nconst GameOver = ({\n  bestGroup,\n  gameType,\n  level,\n  resetGame,\n  restartGame,\n  rotation,\n  score,\n}) => {\n  const [state, setState] = useState(getInitalState({ score, gameType }));\n\n  const createScoreObj = ({ initials }) => {\n    return {\n      score,\n      initials,\n      level,\n      bestGroup,\n      date: DateTime.local().toISO(),\n    };\n  };\n\n  // This should return an identical object,\n  const updateLocalHighScores = ({ highscores, initials }) => {\n    const newHighScores = createNewHighScores(\n      createScoreObj({ initials }),\n      highscores[gameType]\n    );\n\n    localStorage.setItem(\n      'scores',\n      JSON.stringify({\n        ...highscores,\n        [gameType]: newHighScores,\n      })\n    );\n\n    localStorage.setItem('initials', initials);\n\n    return newHighScores;\n  };\n\n  const {\n    globalPlace,\n    globalPlays,\n    highscores,\n    highscoresGlobal,\n    highscoresLocal,\n    initials,\n    isHighScore,\n    submitted,\n  } = state;\n\n  return (\n    <Overlay highScore={submitted} rotation={rotation}>\n      {submitted ? (\n        <HighScores\n          {...{\n            currentInitials: initials,\n            currentScore: score,\n            gameType,\n            globalPlace,\n            globalPlays,\n            highscoresGlobal,\n            highscoresLocal,\n            restartGame,\n            scores: highscores.original,\n          }}\n        />\n      ) : (\n        <>\n          <h2>Game Over</h2>\n          <h3 className=\"final-score\">Score: {score}</h3>\n          <HighScoreFragment\n            {...{\n              handleChange: ({ target }) => {\n                setState(prev => {\n                  return { ...prev, initials: target.value.toUpperCase() };\n                });\n              },\n              handleSubmit: async () => {\n                if (initials.length > 1) {\n                  const res = await axios.post(\n                    'https://wcs0oio6th.execute-api.us-east-1.amazonaws.com/dev/score',\n                    { ...createScoreObj(state), type: gameType }\n                  );\n\n                  setState(prev => {\n                    const newHighScores = updateLocalHighScores(prev);\n                    return {\n                      ...prev,\n                      submitted: true,\n                      // Shouldn't be used.\n                      highscoresLocal: newHighScores,\n                      highscoresGlobal: res.data.top10,\n                      globalPlace: res.data.place,\n                      globalPlays: res.data.total,\n                    };\n                  });\n                }\n              },\n              initials,\n              isHighScore,\n              resetGame,\n            }}\n          />\n        </>\n      )}\n    </Overlay>\n  );\n};\n\nGameOver.propTypes = {\n  bestGroup: PropTypes.number.isRequired,\n  gameType: PropTypes.string.isRequired,\n  level: PropTypes.number.isRequired,\n  restartGame: PropTypes.func.isRequired,\n  rotation: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default GameOver;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Initial from './InitialOverlay';\nimport Paused from './Paused';\nimport LevelOver from './LevelOver';\nimport GameOver from './GameOver';\n\nconst Overlays = ({\n  bestGroup,\n  gameOver,\n  gameType,\n  goToNextLevel,\n  initialized,\n  level,\n  levelBonus,\n  levelOver,\n  paused,\n  pieceBonus,\n  resetGame,\n  restartGame,\n  resumeGame,\n  rotation,\n  score,\n  timeBonus,\n}) => {\n  if (!initialized) {\n    return <Initial {...{ restartGame }} />;\n  }\n\n  if (paused) {\n    return <Paused {...{ rotation, resumeGame, restartGame }} />;\n  }\n\n  if (gameOver) {\n    return (\n      <GameOver\n        {...{\n          bestGroup,\n          gameType,\n          level,\n          resetGame,\n          restartGame,\n          rotation,\n          score,\n        }}\n      />\n    );\n  }\n\n  if (levelOver) {\n    return (\n      <LevelOver\n        {...{\n          gameType,\n          goToNextLevel,\n          level: level + 1,\n          levelBonus,\n          pieceBonus,\n          rotation,\n          timeBonus,\n        }}\n      />\n    );\n  }\n\n  return null;\n};\n\nOverlays.propTypes = {\n  gameOver: PropTypes.bool.isRequired,\n  gameType: PropTypes.string.isRequired,\n  goToNextLevel: PropTypes.func.isRequired,\n  initialized: PropTypes.bool.isRequired,\n  level: PropTypes.number.isRequired,\n  levelBonus: PropTypes.number,\n  levelOver: PropTypes.bool.isRequired,\n  paused: PropTypes.bool.isRequired,\n  pieceBonus: PropTypes.number,\n  resetGame: PropTypes.func.isRequired,\n  restartGame: PropTypes.func.isRequired,\n  resumeGame: PropTypes.func.isRequired,\n  rotation: PropTypes.number.isRequired,\n  timeBonus: PropTypes.number,\n};\n\nOverlays.defaultProps = {\n  levelBonus: 0,\n  pieceBonus: 0,\n  timeBonus: 0,\n};\n\nexport default Overlays;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = ({\n  dim,\n  rotation,\n  squareHeight,\n  row,\n  col,\n  color,\n  handleClick,\n}) => {\n  const POSTION = {\n    top: 0,\n    left: 0,\n  };\n\n  switch (((rotation % 4) + 4) % 4) {\n    case 0:\n      POSTION.top = squareHeight * (dim - row - 1);\n      POSTION.left = squareHeight * col;\n      break;\n    case 1:\n      POSTION.top = squareHeight * (dim - col - 1);\n      POSTION.left = squareHeight * (dim - row - 1);\n      break;\n    case 2:\n      POSTION.top = squareHeight * row;\n      POSTION.left = squareHeight * (dim - col - 1);\n      break;\n    case 3:\n      POSTION.top = squareHeight * col;\n      POSTION.left = squareHeight * row;\n      break;\n    default:\n      // Number theory suggests this isn't necessary... silly linter\n      POSTION.top = squareHeight * (dim - row - 1);\n      POSTION.left = squareHeight * col;\n  }\n\n  return (\n    <button\n      className=\"translateX\"\n      onClick={handleClick(col, row)}\n      onTransitionEnd={e => {\n        return e.stopPropagation();\n      }}\n      style={{ transform: `translateX(${POSTION.left}px)`, border: 0 }}\n      type=\"button\"\n    >\n      <div\n        className=\"translateY\"\n        style={{ transform: `translateY(${POSTION.top}px)` }}\n      >\n        <div\n          className={`square color-${color}`}\n          style={{ height: squareHeight, width: squareHeight }}\n        />\n      </div>\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  dim: PropTypes.number.isRequired,\n  rotation: PropTypes.number.isRequired,\n  squareHeight: PropTypes.number.isRequired,\n  row: PropTypes.number.isRequired,\n  col: PropTypes.number.isRequired,\n  color: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst BottomNav = ({ active, handleRotate, handleRandom, movesLeft }) => {\n  return (\n    <div className={classNames('moves', { active })}>\n      <button className=\"icon-holder\" onClick={handleRotate(-1)} type=\"button\">\n        <i className=\"fa fa-redo-alt fa-flip-horizontal\" />\n      </button>\n      <button className=\"icon-holder\" onClick={handleRandom} type=\"button\">\n        <i className=\"fa fa-random\" />\n      </button>\n      <button className=\"icon-holder\" onClick={handleRotate(1)} type=\"button\">\n        <i className=\"fa fa-redo-alt\" />\n      </button>\n      <div className=\"icon-holder moves-holder\">\n        <dl className=\"moves-holder-wrapper\">\n          <dt className=\"moves-header\">MOVES</dt>\n          <dd className=\"moves-remaining\">{movesLeft}</dd>\n        </dl>\n      </div>\n    </div>\n  );\n};\n\nBottomNav.propTypes = {\n  active: PropTypes.bool.isRequired,\n  handleRotate: PropTypes.func.isRequired,\n  handleRandom: PropTypes.func.isRequired,\n  movesLeft: PropTypes.number.isRequired,\n};\n\nexport default BottomNav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Score = ({ score }) => {\n  if (score > 0) {\n    return `+${score}`;\n  }\n\n  if (score === 0) {\n    return '';\n  }\n\n  return score;\n};\n\nconst LastScore = ({ score }) => {\n  return (\n    <div className={classNames('last-score', { red: score < 0 })}>\n      <Score {...{ score }} />\n    </div>\n  );\n};\n\nLastScore.propTypes = {\n  score: PropTypes.number.isRequired,\n};\n\nexport default LastScore;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { GAME_SIZE } from '../utils/constants';\n\nconst Timer = ({\n  active,\n  elapsedTime,\n  hasBeenPaused,\n  setGameOver,\n  startTime,\n  time,\n}) => {\n  const [width, setWidth] = useState(0);\n\n  useEffect(() => {\n    const getPercentLeft = () => {\n      const currentTime = new Date().getTime();\n      const endTime = startTime + time * 1000;\n\n      if (currentTime > endTime) {\n        return 0;\n      }\n\n      return (endTime - currentTime) / (time * 1000);\n    };\n\n    setWidth(active ? `${GAME_SIZE}px` : `${GAME_SIZE * getPercentLeft()}px`);\n  }, [active, startTime, time]);\n\n  return (\n    <div style={{ width, margin: 'auto' }}>\n      <div\n        className={classNames('timer', {\n          'timer-animation': active,\n          'timer-inactive': !active,\n        })}\n        onAnimationEnd={setGameOver}\n        style={{\n          animationDuration: `${time}s`,\n          animationDelay: hasBeenPaused ? `-${elapsedTime / 1000}s` : '0s',\n        }}\n      />\n    </div>\n  );\n};\n\nTimer.propTypes = {\n  active: PropTypes.bool.isRequired,\n  elapsedTime: PropTypes.number,\n  hasBeenPaused: PropTypes.bool.isRequired,\n  startTime: PropTypes.number.isRequired,\n  time: PropTypes.number.isRequired,\n  setGameOver: PropTypes.func.isRequired,\n};\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\n// Components\nimport Overlays from './components/Overlays';\nimport Square from './components/Square';\nimport BottomNav from './components/BottomNav';\nimport LastScore from './components/LastScore';\nimport Timer from './components/Timer';\n\nimport { GAME_SIZE } from './utils/constants';\nimport { getElapsedTime } from './utils/helpers';\nimport { getInitalBoardState, saveState } from './utils/local-storage';\nimport {\n  getPieceBonus,\n  getSquareCollection,\n  isLevelOver,\n  randomizeBoard,\n  removeSquaresAndCondense,\n  rotateBoard,\n  rotateBoardCounter,\n} from './utils/logic-board';\nimport {\n  getNextLevelState,\n  getTimeBonus,\n  isGameOrigional,\n  newGameState,\n} from './utils/logic-levels';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = getInitalBoardState();\n  }\n\n  UNSAFE_componentWillMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    document.removeEventListener(\n      'visibilitychange',\n      this.handleVisibilityChange\n    );\n  }\n\n  handleVisibilityChange = () => {\n    const { gameOver, paused, levelOver } = this.state;\n    if (document.hidden && !gameOver && paused) {\n      if (levelOver) {\n        const newState = getNextLevelState(this.state);\n        this.setState({ ...newState, elapsedTime: 0, paused: true }, () => {\n          return saveState(this.state);\n        });\n      } else {\n        const elapsedTime = getElapsedTime(this.state);\n        this.setState({ paused: true, elapsedTime }, () => {\n          return saveState(this.state);\n        });\n      }\n    }\n  };\n\n  handleClick = (row, col) => {\n    return () => {\n      const {\n        board: oldBoard,\n        clicks: oldClicks,\n        score,\n        level,\n        bestGroup,\n        movesLeft,\n      } = this.state;\n\n      const collection = getSquareCollection(oldBoard, row, col);\n      const clicks = oldClicks + 1;\n\n      if (collection.length === 1) {\n        // Don't do anything? Deduct score?\n        const lastScore = -100 * (level + 1);\n        this.setState({\n          score: score + lastScore,\n          lastScore,\n          clicks,\n        });\n        return;\n      }\n\n      const board = removeSquaresAndCondense(oldBoard, collection);\n\n      const lastScore = collection.length * collection.length * (level + 5);\n\n      const levelOver = isLevelOver(board, movesLeft);\n\n      const {\n        pieceBonus = 0,\n        timeBonus = 0,\n        levelBonus = 0,\n        gameOver = false,\n      } = this.handleLevelOver(levelOver, board);\n\n      this.setState({\n        bestGroup: Math.max(bestGroup, collection.length),\n        board,\n        clicks,\n        falling: false,\n        gameOver,\n        lastScore,\n        levelBonus,\n        levelOver,\n        pieceBonus,\n        rotating: false,\n        score: score + lastScore,\n        timeBonus,\n      });\n    };\n  };\n\n  handleRotate = dir => {\n    return () => {\n      const { rotating, movesLeft } = this.state;\n      // set state rotating\n      if (!rotating && this.canUseMove()) {\n        this.setState({\n          falling: false,\n          movesLeft: movesLeft - 1,\n          rotating: true,\n          rotationDirection: dir,\n        });\n      }\n    };\n  };\n\n  handleRandom = () => {\n    const { movesLeft, board } = this.state;\n\n    if (this.canUseMove()) {\n      const BOARD = randomizeBoard(board);\n\n      const levelOver = isLevelOver(BOARD, movesLeft - 1);\n      const levelOverState = this.handleLevelOver(levelOver, BOARD);\n      this.setState({\n        board: BOARD,\n        movesLeft: movesLeft - 1,\n        levelOver,\n        ...levelOverState,\n      });\n    }\n  };\n\n  handleKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        this.handleRotate(-1)();\n        e.preventDefault();\n        break;\n      case 'ArrowUp':\n        this.handleRandom();\n        e.preventDefault();\n        break;\n      case 'ArrowRight':\n        this.handleRotate(1)();\n        e.preventDefault();\n        break;\n      default:\n    }\n  };\n\n  // Meaning, there are no more clicks remaining in the board\n  handleLevelOver = (levelOver, board) => {\n    if (!levelOver) {\n      return {};\n    }\n\n    const { gameType, level, startTime } = this.state;\n    const pieceBonus = getPieceBonus(board);\n\n    if (isGameOrigional(gameType)) {\n      // Return bonuses\n      return {\n        pieceBonus,\n        timeBonus: getTimeBonus(level, startTime, gameType),\n      };\n    }\n\n    // Puzzle\n    return {\n      gameOver: board.length > 0,\n      levelBonus: (level + 1) * 1000,\n      pieceBonus,\n    };\n  };\n\n  canUseMove = () => {\n    const { movesLeft, gameOver, levelOver } = this.state;\n    return movesLeft > 0 && !gameOver && !levelOver;\n  };\n\n  render() {\n    const {\n      board,\n      clicks,\n      dim,\n      elapsedTime,\n      falling,\n      gameOver,\n      gameType,\n      hasBeenPaused,\n      initialized,\n      lastScore,\n      level,\n      levelOver,\n      movesLeft,\n      paused,\n      rotating,\n      rotation,\n      rotationDirection,\n      score,\n      startTime,\n      time,\n    } = this.state;\n\n    const effectiveRotation = rotating\n      ? rotation + rotationDirection\n      : rotation;\n\n    const inactive = !initialized || levelOver || gameOver || paused;\n    const isSideways = effectiveRotation % 2;\n\n    return (\n      <div id=\"wrapper\">\n        <div className=\" header clearfix\">\n          <h1>DropClicks</h1>\n          <div className=\"header-container\">\n            <div className=\"score-container\">\n              <div className=\"score\">\n                <div className=\"score-header\">LEVEL</div>\n                <div>{level + 1}</div>\n              </div>\n            </div>\n            <div className=\"score-container\">\n              <div className=\"score\">\n                <div className=\"score-header\">SCORE</div>\n                <div>{score}</div>\n              </div>\n\n              <LastScore key={clicks + level} score={lastScore} />\n            </div>\n          </div>\n        </div>\n        <div style={{ position: 'relative' }}>\n          {inactive && (\n            <Overlays\n              goToNextLevel={() => {\n                const newState = getNextLevelState(this.state);\n                this.setState(newState);\n              }}\n              resetGame={() => {\n                this.setState({ initialized: false });\n              }}\n              restartGame={newGameType => {\n                return () => {\n                  this.setState({\n                    ...newGameState(newGameType),\n                    gameType: newGameType,\n                    initialized: true,\n                    paused: false,\n                  });\n                  localStorage.removeItem('board-state');\n                };\n              }}\n              resumeGame={() => {\n                this.setState({\n                  hasBeenPaused: true,\n                  paused: false,\n                  startTime: new Date().getTime() - elapsedTime,\n                });\n                localStorage.removeItem('board-state');\n              }}\n              rotation={effectiveRotation}\n              {...this.state}\n              paused={paused}\n            />\n          )}\n          <div\n            className={classNames({\n              rotating,\n              falling,\n              sideways: isSideways,\n              upright: !isSideways,\n            })}\n            id=\"game\"\n            onTransitionEnd={() => {\n              // there may be more transitions some day\n              if (rotating) {\n                const BOARD =\n                  rotationDirection === 1\n                    ? rotateBoard(board)\n                    : rotateBoardCounter(board);\n\n                this.setState({\n                  rotating: false,\n                  rotation: rotation + rotationDirection,\n                  falling: true,\n                  board: BOARD,\n                });\n\n                if (isLevelOver(BOARD, movesLeft)) {\n                  const levelOverState = this.handleLevelOver(true, BOARD);\n                  this.setState({ levelOver: true, ...levelOverState });\n                }\n              }\n            }}\n            style={{\n              height: `${GAME_SIZE}px`,\n              width: `${GAME_SIZE}px`,\n              transform: `rotate(${effectiveRotation * 90}deg)`,\n            }}\n          >\n            {board\n              .reduce((all, pile, col) => {\n                return all.concat(\n                  pile.map((square, row) => {\n                    return (\n                      <Square\n                        {...{\n                          key: square.id,\n                          col,\n                          color: square.val,\n                          dim,\n                          handleClick: this.handleClick,\n                          rotation,\n                          row,\n                          // Rounding up seems to be a good way of handling weird subpixel issues.\n                          squareHeight: Math.ceil(GAME_SIZE / dim),\n                        }}\n                      />\n                    );\n                  })\n                );\n              }, [])\n              .sort((a, b) => {\n                // Need to keep the order of elements in order on the page for transitions to work\n                return a.key - b.key;\n              })}\n          </div>\n        </div>\n        {isGameOrigional(gameType) && (\n          <Timer\n            {...{\n              active: !inactive,\n              elapsedTime,\n              hasBeenPaused,\n              startTime,\n              time,\n              setGameOver: () => {\n                this.setState({ gameOver: true });\n              },\n            }}\n          />\n        )}\n        <BottomNav\n          handleRandom={this.handleRandom}\n          handleRotate={this.handleRotate}\n          movesLeft={movesLeft}\n          {...{\n            active: !inactive,\n            movesLeft,\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}